############## PRODUCCIONES ##############

nuevoLenguaje --> funciones 

letra --> [a-zA-Z_]
digito --> [0-9]
digitoSC --> [1-9]
cero --> 0
ceroD --> 0\.0
punto --> \.
signo -->[+-]
true --> 'true' | 1
false --> 'false' | 0

## Variable
id --> letra (letra|digito)*

## Tipos de datos
caracter --> '\'' . '\''
cadena --> '\"' .* '\"'
numEnt --> (signo  digitoSC digito*) | (digitoSC digito*) | cero
numDec --> signo? (digitoSC digito* | cero ) punto digito+ | ceroD
num --> numEnt | numDec
boolean --> true | false
datosSimples --> num | caracter | cadena | boolean

## Simbolos
equiv --> '='
finExp --> '$'
#conjuncion --> '^'
#disyuncion --> '#'
#negacion --> ! | 'not'

## Comentarios
noNuevaLinea --> [^\n]*
comentariosUnaL --> '@' .* noNuevaLinea
comentariosMultL --> '/_'.*'_/' 


############## CREACION VARIABLES ##############
tipoVar --> 'int' | 'float' | 'char' | 'string' | boolean
creaVar --> tipoVar id finExp

############## ASIGNACION VARIABLES ##############
parteIzAsig --> tipoVar id | id | obtEleArreglo
parteDAsig --> datosSimples | id | operacionesAritmeticas | obtEleArreglo | llamaFunc
asignacion --> parteIzAsig equiv parteDAsig finExp

############## OPERACIONES ##############

## Operaciones aritmeticas
operandoAr --> numEnt | numDec | id | obtEleArreglo
opTipoUnario --> id | obtEleArreglo
opAritmetico --> '+' | '-' | '*' | '/' | '~' | '**'
operacionesAritmeticas --> operandoAr 
operacionesAritmeticas --> operacionUnaria
operacionesAritmeticas --> '(' operacionesAritmeticas ')'
operacionesAritmeticas --> '-' operacionesAritmeticas
operacionesAritmeticas --> operacionesAritmeticas opAritmetico operacionesAritmeticas
operacionUnaria --> '++' opTipoUnario
operacionUnaria --> '--' opTipoUnario

## Operaciones relacionales
operadorRel --> '>' | '>=' | '<' | '<=' | '==' | '!='
operacionRelacional --> operacionesAritmeticas operadorRel operacionesAritmeticas

## Operaciones logicas
operandoLog --> num | boolean | id | obtEleArreglo
opLogico --> '^' | '#'
negacion --> ! | 'not'
operacionesLogicas --> operandoLog
operacionesLogicas --> operacionRelacional
operacionesLogicas --> '(' operacionesLogicas ')'
operacionesLogicas --> negacion operacionesLogicas
operacionesLogicas --> operacionesLogicas opLogico operacionesLogicas
#operacionesLogicas --> operacionesLogicas operadorRel operacionesLogicas

operaciones --> operacionesAritmeticas | operacionesLogicas | operacionesRelacionales

############## ARREGLOS ESTATICOS ##############
iniParenCuad -->'['
finParenCuad --> ']'
tipoArreglo --> 'int' | 'char' 
tamArreglo --> digitoSC digito* 
creArregloConTam --> tipoArreglo id iniParenCuad tamArreglo finParenCuad
creArregloSinTam --> tipoArreglo id iniParenCuad finParenCuad
soloCreaArreglo --> (creArregloConTam | creArregloSinTam) finExp
eleNumEnt --> numEnt ',' | numEnt
eleCharP --> . 
eleCharS --> letra ',' | letra 
#creAsigArregloConTam --> creArregloConTam equiv iniBloque (eleNumEnt{tamArreglo} | \"eleCharP{tamArreglo}\" | eleCharS{tamArreglo}) finBloque finExp
#creaAsigArregloSinTam --> creArregloSinTam equiv iniBloque (eleNumEnt* | \"eleCharP*\" | eleCharS*) finBloque finExp
obtEleArreglo --> id iniParenCuad tamArreglo finParenCuad


############# FUNCIONES #############

funcionMain --> 'int' 'main' '('')' bloque 
funciones --> funciones funcion | funcion
funcion --> funcionMain | tipoRet id parametros bloque finExp

## Retornos de funciones
tipoRet --> 'int' | 'float' | boolean	

## Parametros de funciones
parametro --> tipoVar id
parametros --> '(' (parametro | parametro ',' parametros) ')' | '('')'

## Bloques de funciones
bloque --> '{' sentencias '}'

## Sentencias
sentencias --> sentencia | sentencia sentencias
sentencia --> creaVar | asignacion | operaciones | llamaFunc | control | funcion | return


## Llamada a funciones
llamaFunc --> id parametros finExp

## Return de funciones
return --> 'return' id finExp
return --> 'return' tipoBasico finExp
return --> 'return' llamaFunc
return --> 'return' operacionesLogicas finExp
return --> 'return' operaciones finExp

############## Estructuras de control ##############
control --> condicional | ciclo

## Condicionales (if, else, elif)

condicional --> condIf condElif* condElse?
condIf --> 'if' '(' operacionesLogicas ')' bloque
condElse --> 'else' bloque
condElif --> 'elif' '(' exprBool ')' bloque


## Ciclos
while --> 'while' '(' operacionesLogicas ')' bloque
doWhile --> "do" bloque 'while' '(' exprBool ')' finExp
for --> 'for' '(' asignacion finExp operacionesLogicas finExp asignacion ')' bloque
ciclo --> while | doWhile | for
