############## PRODUCCIONES ##############

-------------------------------------------------------FALTA SIMBOLO INICIAL------------------------------

############## VARIABLES TERMINALES ##############
'int' 'void' 'float' 'bool' 'char' 'string'
,
-, +, *, /, ~ , **, --, ++
=, >, >=, <, <=, ==, !=, ^, #, not
main, True, False
$
@, /_ , _/
[], {}, ()
if, elif, else, do, while, for, return, break 

############## VARIABLES NO TERMINALES ##############
letra --> [a-zA-Z_]
digito --> [0-9]
digitoSC --> [1-9]
cero --> 0
ceroD --> 0\.0
punto --> \.
signo -->[+-]
true --> 'true' | 1
false --> 'false' | 0

## Variable
id --> letra (letra|digito)*

## Tipos de datos
caracter --> '\'' . '\''
cadena --> '\"' .* '\"'
numEnt --> (signo  digitoSC digito*) | (digitoSC digito*) | cero
numDec --> signo? (digitoSC digito* | cero ) punto digito+ | ceroD
num --> numEnt | numDec
boolean --> true | false

## Simbolos
equiv --> '='
finExp --> '$'
comparacion --> '>' | '>=' | '<' | '<=' | '==' | '!='
conjuncion --> '^'
disyuncion --> '#'
negacion --> ! | 'not'

## Comentarios
noNuevaLinea --> [^\n]*
comentariosUnaL --> '@' '.*' noNuevaLinea
comentariosMultL --> '/_'.*'_/' 


############## CREACION VARIABLES ##############
tipoVar --> 'int' | 'bool' | 'float' | 'char' | 'string'
creaVar --> tipoVar id finExp

############## ASIGNACION VARIABLES ##############
parteIzAsig --> tipoVar id | id | obtEleArreglo
parteDAsig --> num | id | operacionesAritmeticas | obtEleArreglo        #### Revisar al final si falta algo
asignacion --> parteIzAsig equiv parteDAsig finExp

############## OPERACIONES ARITMETICAS ##############

operando --> numEnt | numDec | id | obtEleArreglo
opTipoUnario --> id | obtEleArreglo
opAritmetico --> '+' | '-' | '*' | '/' | '~' | '**'
operacionesAritmeticas --> expr
expr --> operando 
expr --> (expr)
expr --> '-' expr
expr --> expr opAritmetico expr
expr --> expr comparacion expr 
expr --> '++' tipOpUnario
expr --> '--' tipOpUnario


############## ARREGLOS ESTATICOS ##############
iniParenCuad -->'['
finParenCuad --> ']'
tipoArreglo --> 'int' | 'char' 
tamArreglo --> digitoSC digito* 
creArregloConTam --> tipoArreglo id iniParenCuad tamArreglo finParenCuad
creArregloSinTam --> tipoArreglo id iniParenCuad finParenCuad
soloCreaArreglo --> (creArregloConTam | creArregloSinTam) finExp
eleNumEnt --> numEnt ',' | numEnt
eleCharP --> . 
eleCharS --> letra ',' | letra 
#creAsigArregloConTam --> creArregloConTam equiv iniBloque (eleNumEnt{tamArreglo} | \"eleCharP{tamArreglo}\" | eleCharS{tamArreglo}) finBloque finExp
#creaAsigArregloSinTam --> creArregloSinTam equiv iniBloque (eleNumEnt* | \"eleCharP*\" | eleCharS*) finBloque finExp
obtEleArreglo --> id iniParenCuad tamArreglo finParenCuad


############# FUNCIONES #############
funcion --> tipoRet id parametros bloque finExp

## Retornos de funciones
tipoRet --> 'int' | 'float' | 'boolean'	

## Parametros de funciones
parametro --> tipoVar id
parametros --> '(' (parametro | parametro ',' parametros) ')'

## Bloques de funciones
bloque --> '{' sentencias '}'

## Sentencias
sentencias --> sentencia | sentencia sentencias
sentencia --> creaVar | asignacion | llamaFunc | control | funcion | return


## Llamada a funciones
llamaFunc --> id params finExp

## Return de funciones
return --> "return" id finExp
return --> "return" tipoBasico finExp
return --> "return" finExp
return --> "return" llamaFunc
return --> "return" exprBool
return --> "return" operaciones //falta definir

############## Estructuras de control ##############
control --> condicional | ciclo

## Condicionales (if, else, elif)

condicional --> condIf condElif* condElse?
condIf --> 'if' '(' exprBool ')' bloque
condElse --> 'else' bloque
condElif --> 'elif' '(' exprBool ')' bloque


## Ciclos
while --> 'while' '(' exprBool ')' bloque
doWhile --> "do" bloque 'while' '(' exprBool ')' finExp
for --> 'for' '(' creAsignVar ';' exprBool ';' asignacion ')' bloque
ciclo --> while | doWhile | for
