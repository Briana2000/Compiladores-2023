####### PRODUCCIONES ####### 

-------------------------------------------------------FALTA SIMBOLO INICIAL------------------------------

####### VARIABLES TERMINALES #######
'int' 'void' 'float' 'bool' 'char' 'string'
,
-, +, *, /, ~ , **, --, ++
=, >, >=, <, <=, ==, !=, ^, #, not
main, True, False
$
@, /_ , _/
[], {}, ()
if, elif, else, do, while, for, return, break 

####### VARIABLES NO TERMINALES #######
letra --> [a-zA-Z_]
digito --> [0-9]
id --> letra (letra|digito)*
digitoSC --> [1-9]
cero --> 0
ceroD --> 0\.0
punto --> \.
signo -->[+-]
numEnt --> (signo  digitoSC digito*) | (digitoSC digito*) | cero
numDec --> signo? (digitoSC digito* | cero ) punto digito+ | ceroD
num --> numEnt | numDec
true --> 'True' | 1
false --> 'False' | 0
boolean --> true | false 
#string --> \" .* \"
tipoBasico --> num | boolean | string
equiv --> '='
finExp --> '$'
idBool --> id | boolean
comparacion --> '>' | '>=' | '<' | '<=' | '==' | '!='
conjuncion --> '^'
disyuncion --> '#'
negacion --> ! | 'not'
noNuevaLinea --> [^\n]*
comentariosUnaL --> '@' '.*' noNuevaLinea
comentariosMultL --> '/_'.*'_/' 
tipoNum --> 'int' | 'float'


####### CREACION VARIABLES #######
tipoVar --> 'int' | 'bool' | 'float' | 'char' | 'string'
creaVar --> tipoVar id finExp

####### ASIGNACION VARIABLES #######
parteIzAsig --> tipo id | id | obtEleArreglo
parteDAsig --> num | id | operacionesAritmeticas | obtEleArreglo        #### Revisar al final si falta algo
asignacion --> parteIzAsig equiv parteDAsig finExp

####### OPERACIONES ARITMETICAS #######

operando --> numEnt | numDec | id | obtEleArreglo
opTipoUnario --> id | obtEleArreglo
opAritmetico --> '+' | '-' | '*' | '/' | '~' | '**'
operacionesAritmeticas --> expr
expr --> operando 
expr --> (expr)
expr --> '-' expr
expr --> expr opAritmetico expr
expr --> expr comparacion expr 
expr --> '++' tipOpUnario
expr --> '--' tipOpUnario


####### ARREGLOS ESTATICOS #######
iniParenCuad -->'['
finParenCuad --> ']'
tipoArreglo --> 'int' | 'char' 
tamArreglo --> digitoSC digito* 
creArregloConTam --> tipoArreglo id iniParenCuad tamArreglo finParenCuad
creArregloSinTam --> tipoArreglo id iniParenCuad finParenCuad
soloCreaArreglo --> (creArregloConTam | creArregloSinTam) finExp
eleNumEnt --> numEnt ',' | numEnt
eleCharP --> . 
eleCharS --> letra ',' | letra 
#creAsigArregloConTam --> creArregloConTam equiv iniBloque (eleNumEnt{tamArreglo} | \"eleCharP{tamArreglo}\" | eleCharS{tamArreglo}) finBloque finExp
#creaAsigArregloSinTam --> creArregloSinTam equiv iniBloque (eleNumEnt* | \"eleCharP*\" | eleCharS*) finBloque finExp
obtEleArreglo --> id iniParenCuad tamArreglo finParenCuad


###### FUNCIONES ######
funcion --> tipoRet id params bloque finExp

tipoRet --> 'int' | 'float' | 'boolean'	

parametros --> creaVar
parametros --> creaVar, parametros
params --> '(' parametros ')'


bloque --> '{' sentencias '}'

sentencias --> sentencia | sentencias sentencia
sentencia --> creacion | asignacion | llamaFun | condicional | ciclo | funcion | return


## Llamada a funciones
llamaFun --> id params finExp

## Return de funciones
return --> "return" id finExp
return --> "return" tipoBasico finExp
return --> "return" finExp
return --> "return" llamaFun
return --> "return" exprBool
return --> "return" operaciones //falta definir


## Condicionales (if, else, elif)

condicional --> condIf condElif* condElse?
condIf --> 'if' '(' exprBool ')' bloque
condElse --> 'else' bloque
condElif --> 'elif' '(' exprBool ')' bloque


## Ciclos
while --> 'while' '(' exprBool ')' bloque
doWhile --> "do" bloque 'while' '(' exprBool ')' finExp
for --> 'for' '(' creAsignVar ';' exprBool ';' asignacion ')' bloque
ciclo --> while | doWhile | for


#falta definir
creAsignVar --> creaVar equiv tipoBasico finExp
creAsignVar --> creaVar equiv id finExp
asignacion --> id equiv tipoBasico finExp
asignacion --> id equiv id
asignacion --> id equiv llamaFun
asignacion --> id equiv exprBool
asignacion --> id equiv operaciones //falta definir
asignacion --> id operadorUnario finExp
asignacion --> id operadorUnario operadorUnario finExp
asignacion --> operadorUnario id finExp
asignacion --> operadorUnario operadorUnario id finExp

operadorUnario --> '++' | '--' 