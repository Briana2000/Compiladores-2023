//////PRODUCCIONES///////////

expr --> ε
expr --> id
expr --> numEnt
expr --> numDec
expr --> creaVar
expr --> creArreglo
expr --> obtEleArreglo
expr --> expr equiv expr 
expr --> expr finExpr
expr --> (expr)
expr --> [expr]
expr --> {expr} 
expr --> expr
expr --> - expr
expr --> expr, expr
expr --> expr + expr
expr --> expr - expr
expr --> expr * expr
expr --> expr / expr
expr --> expr ~ expr    /// Puede haber màs de 2 expresiones?
expr --> expr ** expr   //// Puede haber màs de 2 expresiones?
expr --> ++ tipOpUnario
expr --> -- tipOpUnario
expr --> operando > operando
expr --> operando >= operando
expr --> operando < operando
expr --> operando <= operando
expr --> operando == operando
expr --> operando != operando 
expr --> idBool == idBool
expr --> idBool != idBool
expr --> expr ^ expr
expr --> expr # expr
expr --> negacion expr
expr --> comentariosUnaL
expr --> comentariosMultL





///////VARIABLES NO TERMINALES///////////
letra --> [a-zA-Z_]
digito --> [0-9]
id --> letra (letra|digito)*
digitoSC --> [1-9]
cero --> 0
ceroD --> 0\.0
punto --> \.
signo -->[+-]
numEnt --> (signo  digitoSC digito*) | (digitoSC digito*) | cero
numDec --> signo? (digitoSC digito* | cero ) punto digito+ | ceroD
true --> 'True' | 1
false --> 'False' | 0
bool --> true | false
equiv --> '='
finExp --> '$'
tipOpUnario --> id | numEnt | obtEleArreglo
idBool --> id | bool
negación --> ! | 'not'
comentariosUnaL --> \@\N*
comentariosMultL --> \/.*\/ 



// ASIGNACION-CREACION VARIABLES //
tipoVar --> 'int' | 'boolean' | 'float' | 'char' | 'string'
operando --> numEnt | numDec | id
opAritmetico --> '+' | '-' | '*' | '/'
tipoNum --> 'int' | 'float'
creaVar --> tipoVar id

//ARREGLOS ESTATICOS//
iniParenCuad -->'['
finParenCuad --> ']'
tipoArreglo --> 'int' | 'char' 
tamArreglo --> digitoSC digito* | ε
creArreglo --> tipoArreglo id iniParenCuad tamArreglo finParenCuad
obtEleArreglo --> id iniParenCuad tamArreglo finParenCuad



//FUNCIONES//

iniBloque --> '{'
finBloque --> '}'
tipoRet --> 'int' | 'float' | 'boolean'	
iniPar --> '('
finPar --> ')'
param --> tipoVar id (, tipoVar id)*            /// recibir parámetros (con tipo)?? Solo con tipo? /////
parametros --> iniPar param* finPar

sentencias --> sentencia | sentencias sentencia
sentencia --> creAsignVar | asignación | llamada | condicional 

funcion --> tipoRet id params iniBloque sentencias finBloque finExp
